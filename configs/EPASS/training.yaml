data:
  train:
    module: torch.utils.data
    class: DataLoader
    DataLoader:
      dataset:
        module: data.labelme_dataset
        class: LabelmeDataset
        LabelmeDataset:
          dirnames:
            - "'/extdata/ocr/phungpx/projects/PHUNGPX/object_detection_pytorch/efficient_det_pytorch/dataset/EPASS/train'"
          classes:
            EPASS_TYPE_1: 1
            EPASS_TYPE_2: 1
            EPASS_TYPE_3: 1
            EPASS_TYPE_4: 1
            EPASS_TYPE_5: 1
            V_SERIAL: 2
          # image_size: (800, 800)
          image_size: None
          mean: [0., 0., 0.]
          std: [1., 1., 1.]
          image_patterns:
            ["'*.jpg'", "'*.png'", "'*.jpeg'", "'*.JPG'", "'*.PNG'", "'*.JPEG'"]
          label_patterns: ["'*.json'"]
          transforms:
            - iaa.MotionBlur()
            - iaa.ChangeColorTemperature()
            - iaa.GaussianBlur(sigma=(0, 1))
            - iaa.Grayscale(alpha=(0.0, 1.0))
            - iaa.Add(value=(-50, 50), per_channel=True)
            - iaa.Fliplr(p=0.5)
            - iaa.Flipud(p=0.5)
            - iaa.Crop(percent=(0, 0.1))
            - iaa.Pad(percent=(0, 0.1), keep_size=False)
            - iaa.Rot90(k=[0, 1, 2, 3], keep_size=False)
            - iaa.Affine(rotate=(0, 360), shear=(-2, 2), fit_output=True)
      batch_size: 4
      shuffle: True
      num_workers: 12
      pin_memory: True
      drop_last: False
      collate_fn: "lambda batch:tuple(zip(*batch))"

  train_eval:
    module: torch.utils.data
    class: DataLoader
    DataLoader:
      dataset:
        module: data.labelme_dataset
        class: LabelmeDataset
        LabelmeDataset:
          dirnames:
            - "'/extdata/ocr/phungpx/projects/PHUNGPX/object_detection_pytorch/efficient_det_pytorch/dataset/EPASS/train'"
          classes:
            EPASS_TYPE_1: 1
            EPASS_TYPE_2: 1
            EPASS_TYPE_3: 1
            EPASS_TYPE_4: 1
            EPASS_TYPE_5: 1
            V_SERIAL: 2
          # image_size: (800, 800)
          image_size: None
          mean: [0., 0., 0.]
          std: [1., 1., 1.]
          image_patterns:
            ["'*.jpg'", "'*.png'", "'*.jpeg'", "'*.JPG'", "'*.PNG'", "'*.JPEG'"]
          label_patterns: ["'*.json'"]
      batch_size: 4
      shuffle: False
      num_workers: 12
      pin_memory: True
      drop_last: False
      collate_fn: "lambda batch:tuple(zip(*batch))"

  valid:
    module: torch.utils.data
    class: DataLoader
    DataLoader:
      dataset:
        module: data.labelme_dataset
        class: LabelmeDataset
        LabelmeDataset:
          dirnames:
            - "'/extdata/ocr/phungpx/projects/PHUNGPX/object_detection_pytorch/efficient_det_pytorch/dataset/EPASS/valid'"
          classes:
            EPASS_TYPE_1: 1
            EPASS_TYPE_2: 1
            EPASS_TYPE_3: 1
            EPASS_TYPE_4: 1
            EPASS_TYPE_5: 1
            V_SERIAL: 2
          # image_size: (800, 800)
          image_size: None
          mean: [0., 0., 0.]
          std: [1., 1., 1.]
          image_patterns:
            ["'*.jpg'", "'*.png'", "'*.jpeg'", "'*.JPG'", "'*.PNG'", "'*.JPEG'"]
          label_patterns: ["'*.json'"]
      batch_size: 4
      shuffle: False
      num_workers: 12
      pin_memory: True
      drop_last: False
      collate_fn: "lambda batch:tuple(zip(*batch))"

model:
  module: models.maskrcnn_resnet50_fpn_v2
  class: MaskRCNNResNet50FPNV2
  MaskRCNNResNet50FPNV2:
    pretrained: False
    backbone_pretrained: True
    num_classes: 3
    # Anchors parameters
    anchor_sizes: "((16,), (32,), (64,), (128,), (256,))"
    aspect_ratios: "((0.25, 0.5, 1.0, 2.0, 4.0),) * 5"
    # Box parameters
    box_score_thresh: 0.5
    box_nms_thresh: 0.2

loss:
  module: losses.aggregate_maskrcnn_loss
  class: AggregatedLoss
  AggregatedLoss:
    verbose: False
    box_cls_weight: 1.
    box_reg_weight: 1.
    rpn_cls_weight: 1.
    rpn_reg_weight: 1.
    mask_weight: 1.
    output_transform: "lambda x: x"

# # FP16: https://pytorch.org/docs/stable/amp.html
# scaler:
#   module: torch.cuda.amp
#   class: GradScaler

optim:
  module: torch.optim
  class: SGD
  SGD:
    params: config['model'].parameters()
    lr: 0.005
    momentum: 0.95
    weight_decay: 0.0005

lr_scheduler:
  module: handler.lr_scheduler
  class: ReduceLROnPlateau
  ReduceLROnPlateau:
    evaluator_name: "'valid'"
    score_name: "'mAP'"
    optim: config['optim']
    mode: "'max'"
    patience: 10
    verbose: True

early_stopping:
  module: handler.early_stopping
  class: EarlyStopping
  EarlyStopping:
    evaluator_name: "'valid'"
    score_name: "'mAP'"
    patience: 100
    delta: 0
    mode: "'max'"

metrics:
  module: handler.evaluator
  class: Metrics
  Metrics:
    metrics:
      mAP:
        module: metrics.map
        class: mAP
        mAP:
          classes:
            EPASS: 1
            V_SERIAL: 2
          iou_threshold: 0.5
          method: "'every_point_interpolation'"
          print_detail_mAP: False
          print_FP_files: False
          output_transform: "lambda x: (x[0], x[1], x[2])"

writer:
  module: handler.writer
  class: Writer
  Writer:
    save_dir: "'checkpoint/EPASS/'"

plotter:
  module: handler.plotter
  class: Plotter
  Plotter:
    save_dir: "'checkpoint/EPASS/'"

logger:
  module: handler.logger
  class: Logger
  Logger:
    save_dir: "'checkpoint/EPASS/'"
    mode: logging.DEBUG
    format: "'%(asctime)s - %(name)s - %(levelname)s - %(message)s'"

trainer:
  module: engine.train
  class: Trainer
  Trainer:
    project_name: "'EPASS'"
    data:
      train: config['data']['train']
      train_eval: config['data']['train']
      valid: config['data']['valid']
      test: config['data']['valid']
    model: config['model']
    loss: config['loss']
    optim: config['optim']
    metric: config['metrics']
    early_stopping: config['early_stopping']
    lr_scheduler: config['lr_scheduler']
    logger: config['logger']
    writer: config['writer']
    plotter: config['plotter']
    # model_inspection: config['model_inspection']
    save_dir: "'checkpoint/EPASS/'"

extralibs:
  torch: torch
  logging: logging
  iaa: imgaug.augmenters
